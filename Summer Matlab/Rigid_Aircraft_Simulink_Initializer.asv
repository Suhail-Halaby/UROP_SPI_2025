clear
clc
close all

%% Battery
max_cap = 3600*236.80;
laps = 10;
tog = 0;
time_lim = 2*3600;
%% System Matrices

A_long = [
            -0.0443238,            0.535343,                   0,               -9.81;
              -1.39239,            -8.47466,             11.4293,                   0;
           -0.00762359,            -4.30179,            -6.14639,                   0;
                     0,                   0,                   1,                   0 ] ;

A_lat = [
             -0.411379,           -0.649153,            -13.5366,                9.81,   0;
              -1.46667,            -16.7448,             3.78401,                   0,   0;
              0.292253,            -2.34281,           -0.384354,                   0,   0;
                     0,                   1,                   0,                   0,   0;
                     0,                   0,                   1,                   0,   0;] ;

A = [A_long,zeros(4,5);zeros(5,4),A_lat];
%% Control Matricies

B_elv = [ 0.07638803; -11.96186; -43.11175; 0];

B_thr = [ 30 ; 0 ; 0 ; 0];

B_long  = [  B_elv , B_thr ];

B_ail = [ 1.178498; 35.6272; 2.449692; 0; 0];

B_rud = [ 3.77032; 0.8297701; -5.705696; 0; 0];

B_lat = [ B_ail , B_rud];

B = [B_long,zeros(4,2);zeros(5,2),B_lat];

C = eye(9);

clear B_rud B_ail B_elv B_thr

%% Static Longitudinal TRIM

U_inf = 15;
Theta_eq = 0;

X_eq = [U_inf; 0; 0; Theta_eq];

trim_fun = @(xu) A_long*xu(1:4) + B_long*xu(5:6);
xu0 = [U_inf; 0; 0;Theta_eq;0;0];  % initial guess
xu_trim = fsolve(trim_fun, xu0);
x_trim = xu_trim(1:4);
u_trim = xu_trim(5:6);


disp('Equilibrium control input:');
disp(u_trim);
disp('Equilibrium states:');
disp(x_trim);


%% LQR with augmented states

% % Augment system
% A_aug = [A, zeros(9); -C, zeros(9)];
% B_aug = [B; zeros(9,4)];
% 
% % Weighting matrices
% Q_state = diag([1 1 1 1 1 1 1 1 1]);   % Tune these
% Q_int = 0.01*eye(9);                      % Less weight on integrators
% Q = blkdiag(Q_state, Q_int);
% 
% R = 0.1*eye(4);  % Penalize control effort
% 
% check0 = rank(ctrb(A,B)) 
% check1 = rank(ctrb(A_aug,B_aug)) 

% Solve LQR
%K_aug = lqr(A_aug, B_aug, Q, R);

%% LQR Implementation


Q_long = diag([1 10 1 1]);
R_long = diag([1 1]);

K_long = lqr(A_long,B_long,Q_long,R_long);
N_long = -pinv(eye(4) * inv(A_long - B_long*K_long) * B_long);

% A_long_aug = [A_long,zeros(4,1);-ones(1,4),zeros(1)];
% B_long_aug = [B_long;zeros(1,2)];
% 
check2 = rank(ctrb(A_long,B_long));
%K_long_aug = lqr(A_long_aug,B_long_aug,eye(5),eye(2));


Q_lat = diag([1 1 1 1 1]);
R_lat = diag([1 1]);

K_lat = lqr(A_lat,B_lat,Q_lat,R_lat); 
N_lat = -pinv(eye(5) * inv(A_lat - B_lat*K_lat) * B_lat);



% A_lat_aug = [A_lat,zeros(5,1);-ones(1,5),zeros(1)];
% B_lat_aug = [B_lat;zeros(1,2)];
% check3 = rank(ctrb(A_lat_aug,B_lat_aug))



clear Q_lat Q_long R_lat R_long


SimuPilot_Initializer();

wpts_x = [250,500,750];
wpts_y = [250,0,250];
wpts_z = [0,0,0];

wpts_tx = [250,250,250];
wpts_ty = [250,-250,250];
wpts_tz = [0,0,0];

wpts = [wpts_x;wpts_y;wpts_z;wpts_tx;wpts_ty;wpts_tz];

wpts = readmatrix('wpt_output.csv');
wpts = wpts(:,2:end);

wpts
wp_rad = 50;
L1 = 100; 


%% SHADOW CASTER

energy_factor_lookup = readmatrix('Energy_Factor_Lookup.csv');

SZh = size(unique(energy_factor_lookup(:,2)),1);
SZv = size(unique(energy_factor_lookup(:,1)),1);
Z = reshape(energy_factor_lookup(:,3),SZh,SZv);

%% plot
surf(unique(energy_factor_lookup(:,1))*180/pi,unique(energy_factor_lookup(:,2))*180/pi,Z)
xlabel('Aircraft FoR Sun Elevation Angle (deg)')
ylabel('Aircraft FoR Sun Azimuth (deg)')
zlabel('Active Solar-Cell Area Fraction')

 %set(gca,'YTick',-pi:pi/2:pi) 
 %set(gca,'YTickLabel',{'-pi','-pi/2','0','pi/2','pi'})



